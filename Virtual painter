import cv2
import mediapipe as mp
import os
import numpy as np

width = 1500
height = 1500
myHands = mp.solutions.hands.Hands(False, 2, 1, .1)
mpDraw = mp.solutions.drawing_utils
tipIds = [4, 8, 12, 16, 20]

folderPath = "/Users/anastalib/PycharmProjects/OpencvPython/testr"
myList = os.listdir(folderPath)
imagesList = []
for imPath in myList:
    image = cv2.imread(f'{folderPath}/{imPath}')
    imagesList.append(image)
    print(len(imagesList))

header = imagesList[0]
Colour = (255, 0, 255)
cam = cv2.VideoCapture(0)
xp, yp = 0, 0
imgCanvas = np.zeros((1500, 1500, 3), np.uint8)

while True:
    success, frame = cam.read()
    frame = cv2.flip(frame, 1)
    frame = cv2.resize(frame, (width, height))
    frame[0:209, 0:1500] = header
    # frame = cv2.addWeighted(frame, 0.5, imgCanvas, 0.5,0)
    header = imagesList[0]
    myHandss = []
    frameBGR = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = myHands.process(frameBGR)

    if results.multi_hand_landmarks != None:
        for hand in results.multi_handedness:
            HandsType = []
            HandType = hand.classification[0].label
            # index= hand.classification[0].index
            HandsType.append(HandType)

        handy = []
        for hand_landmark in results.multi_hand_landmarks:
            mpDraw.draw_landmarks(frame, hand_landmark, mp.solutions.hands.HAND_CONNECTIONS)
            handy.append(hand_landmark)
            # print(handy)
            aHand = []
            for i in hand_landmark.landmark:
                aHand.append((int(i.x * width), int(i.y * height), int(1)))
                # print(aHand)

            myHandss.append(aHand)

        x1, y1 = aHand[8][0], aHand[8][1]
        x2, y2 = aHand[12][0], aHand[12][1]

        if len(aHand) != 0:
            fingers = []
            header = imagesList[0]
            if aHand[tipIds[0]][1] < aHand[tipIds[0] - 1][1]:
                fingers.append(1)
            else:
                fingers.append(0)

            # Fingers
            for id1 in range(1, 5):
                if aHand[tipIds[id1]][1] < aHand[tipIds[id1] - 2][1]:
                    fingers.append(1)
                else:
                    fingers.append(0)

            if fingers[0] and fingers[1] and fingers[2] and fingers[3] == False and fingers[4] == False:
                print("selection mode")
                if y1 < 250:

                    if 166 < x1 < 315:
                        header = imagesList[0]
                        Colour = (255, 0, 255)
                    elif 555 < x1 < 692:
                        # header = imagesList[1]
                        Colour = (255, 0, 0)
                    elif 936 < x1 < 1089:
                        # header = imagesList[2]
                        Colour = (0, 255, 255)
                    elif 1290 < x1 < 1481:
                        # header = imagesList[3]
                        Colour = (0, 0, 0)
                    else:
                        Colour = Colour
                cv2.rectangle(frame, (x1, y1), (x2, y2), Colour, cv2.FILLED)

            if fingers[0] and fingers[1] and fingers[2] == False and fingers[3] == False and fingers[4] == False:
                print("drawing mode")
                cv2.circle(frame, (x1, y1), 15, Colour, cv2.FILLED)
                if Colour == (0, 0, 0):
                    cv2.circle(frame, (x1, y1), 50, Colour, cv2.FILLED)
                if xp == 0 and yp == 0:
                    xp, yp = x1, y1

                cv2.line(frame, (xp, yp), (x1, y1), Colour, 15)
                cv2.line(imgCanvas, (xp, yp), (x1, y1), Colour, 15)
                xp, yp = x1, y1
                imgGray = cv2.cvtColor(imgCanvas, cv2.COLOR_BGR2GRAY)
                _, imgInv = cv2.threshold(imgGray, 50, 255, cv2.THRESH_BINARY_INV)
                imgInv = cv2.cvtColor(imgInv, cv2.COLOR_GRAY2RGB)
                frame = cv2.bitwise_and(frame, imgInv)
                frame = cv2.bitwise_or(frame, imgCanvas)

    cv2.imshow("window", frame)
    cv2.imshow("canvas", imgCanvas)
    if cv2.waitKey(1) & 0xff == ord('q'):
        break
cam.release()
